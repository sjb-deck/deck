name: deck CI/CD

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_deck_staging
          MYSQL_ROOT_PASSWORD: testrootpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get .nvmrc Node.js version
        id: nvm
        run: echo "::set-output name=NODE_VERSION::$(cat .nvmrc)"
      - name: Setup Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: '${{ steps.nvm.outputs.NODE_VERSION }}'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm install
      - name: Run Style Check
        run: |
          black . --check
          npx eslint .
      - name: Run Tests with Code Coverage
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          NEXTCLOUD_USERNAME: ${{ secrets.NEXTCLOUD_USERNAME }}
          NEXTCLOUD_APP_PASSWORD: ${{ secrets.NEXTCLOUD_APP_PASSWORD }}
          DEBUG: ${{ secrets.DEBUG }}
          DB_USER: root
          DB_PW: testrootpassword
          DB_HOST: 127.0.0.1
        run: |
          python manage.py migrate --noinput
          coverage run manage.py test --noinput
          coverage xml -o coverage.xml
          npm run test:coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
        

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploying to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            set -e
            cd deck/
            source deck-env/env/bin/activate
            cd deck
            git reset --hard
            git pull
            pip install -r requirements.txt
            source ~/.nvm/nvm.sh
            nvm install
            nvm use
            npm prune
            npm install
            python manage.py makemigrations
            python manage.py migrate
            npm run build
            echo ${{ secrets.PASSWORD }} | sudo -S service apache2 reload
