import { fireEvent, render, screen } from '@testing-library/react';


import '@testing-library/jest-dom/extend-expect';
import AccordionItem from '../../../components/LoanReturn/AccordionItem';

// Mock the DrawerContent component since it is not relevant for these tests
jest.mock('../../../components/LoanReturn/DrawerContent', () => {
  const MockedDrawerContent = () => <div data-testid='drawer-content-mock' />;
  return Object.assign(MockedDrawerContent, { displayName: 'DrawerContent' });
});

xdescribe('AccordionItem', () => {
  const orderItem = {
    name: 'Test Item',
    quantity_opened: 5,
    quantity_unopened: 3,
  };

  test('should render the component with the correct data', () => {
    render(<AccordionItem orderItem={orderItem} />);

    // Assert that the item name, quantity opened, and quantity unopened are displayed
    expect(screen.getByText('Test Item')).toBeInTheDocument();
    expect(screen.getByText('5')).toBeInTheDocument();
    expect(screen.getByText('3')).toBeInTheDocument();
  });

  test('should open the drawer when the info icon is clicked', () => {
    render(<AccordionItem orderItem={orderItem} />);

    // The drawer should not be visible initially
    expect(screen.queryByTestId('drawer-content-mock')).not.toBeInTheDocument();

    // Click on the info icon
    fireEvent.click(screen.getByRole('button'));

    // The drawer should be visible after clicking the info icon
    expect(screen.getByTestId('drawer-content-mock')).toBeInTheDocument();
  });
});
